
* Configuration
** Personal 
#+begin_src emacs-lisp
  (setq user-full-name "Pratik Vyas"
        user-mail-address "m@pd.io")
#+end_src
** Emacs Init
*** Install packages if necessary
#+begin_src emacs-lisp
(defun pd/package-install (package &optional repository)
  "Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that."
  (unless (package-installed-p package)
    (let ((package-archives (if repository
                                (list (assoc repository package-archives))
                              package-archives)))
    (package-install package))))
;(pd/package-install 'use-package)
; (require 'use-package)
#+end_src

*** Add package sources
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives '("elpy" . "http://jorgenschaefer.github.io/packages/"))
  (package-initialize)
#+end_src

*** Add to load path
#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'exec-path "~/bin")
  (add-to-list 'exec-path "/usr/local/bin")
  (add-to-list 'exec-path "~/.javahome/bin")
  (if (not (getenv "TERM_PROGRAM"))
       (setenv "PATH"
              (shell-command-to-string "source $HOME/.paths && printf $PATH")))
  (setenv "GOPATH" "/Users/tleyden/Development/gocode")
#+end_src

** General
*** Startup
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
#+end_src

*** Pairs
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

*** Scrolling
#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+end_src

*** Y/N questions
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Annoying files
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src

*** Windowing
#+begin_src emacs-lisp
  (defun swap-window-positions ()         ; Stephen Gildea
    "*Swap the positions of this window and the next one."
    (interactive)
    (let ((other-window (next-window (selected-window) 'no-minibuf)))
      (let ((other-window-buffer (window-buffer other-window))
            (other-window-hscroll (window-hscroll other-window))
            (other-window-point (window-point other-window))
            (other-window-start (window-start other-window)))
        (set-window-buffer other-window (current-buffer))
        (set-window-hscroll other-window (window-hscroll (selected-window)))
        (set-window-point other-window (point))
        (set-window-start other-window (window-start (selected-window)))
        (set-window-buffer (selected-window) other-window-buffer)
        (set-window-hscroll (selected-window) other-window-hscroll)
        (set-window-point (selected-window) other-window-point)
        (set-window-start (selected-window) other-window-start))
      (select-window other-window)))


  (defun switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (global-set-key (kbd "s-z") 'switch-to-previous-buffer)
#+end_src

** Evil stuff

#+begin_src emacs-lisp
      (pd/package-install 'evil)
      (evil-mode 1)
      (setq-default evil-symbol-word-search t)
      ;; (evil-set-initial-state 'speedbar-mode 'emacs)
#+end_src
   
*** I use semicolon to get into ex mode 
#+begin_src emacs-lisp
  (define-key evil-normal-state-map ";" 'evil-ex)
#+end_src
*** Commenting
#+begin_src emacs-lisp
  (pd/package-install 'evil-nerd-commenter)
  (define-key evil-normal-state-map "gcc" 'evilnc-comment-or-uncomment-lines)
#+end_src
*** Expand region
#+begin_src emacs-lisp
  (pd/package-install 'expand-region)
  (define-key evil-normal-state-map "x" 'er/expand-region)
  (define-key evil-normal-state-map "s" 'er/contract-region)
#+end_src

*** Quitting buffers
#+begin_src emacs-lisp
(evil-ex-define-cmd "q" 'kill-buffer-and-window)
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+end_src
** Modes
**** Markdown
#+begin_src emacs-lisp
  (pd/package-install 'markdown-mode)
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+end_src
**** SML
#+begin_src emacs-lisp
  (pd/package-install 'sml-mode)
#+end_src
**** Python
#+begin_src emacs-lisp
  (pd/package-install 'elpy)
  (elpy-enable)
  (elpy-use-ipython)


  ;; Ignoring electric indentation
  (defun electric-indent-ignore-python (char)
    "Ignore electric indentation for python-mode"
    (if (equal major-mode 'python-mode)
        `no-indent'
      nil))
  (add-hook 'electric-indent-functions 'electric-indent-ignore-python)
    ;; (defun complete-or-indent ()
    ;;   (interactive)
    ;;   (if (company-manual-begin)
    ;;       (company-complete-common)
    ;;     (indent-according-to-mode)))

#+end_src
**** Clojure
#+begin_src emacs-lisp
  (pd/package-install 'cider)
  (pd/package-install 'ac-cider)
  (setq cider-show-error-buffer nil)
  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))
#+end_src

**** YAML
#+begin_src emacs-lisp
  (pd/package-install 'yaml-mode)
  (add-hook 'yaml-mode-hook
            (lambda ()
               (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src
** COMMENT TODO Tabs!


#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-t") 'elscreen-create)

#+end_src

Sort tabs
#+begin_src emacs-lisp

  ;; (global-evil-tabs-mode t)
#+end_src

Keybindings
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "gt") 'elscreen-next)
  (define-key evil-normal-state-map (kbd "gT") 'elscreen-previous)
  (define-key evil-normal-state-map (kbd "gb") 'iswitchb-buffer)
  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
  (define-key evil-normal-state-map (kbd "C-S-p") 'projectile-switch-to-buffer)
  (define-key evil-normal-state-map (kbd "z") 'neotree-toggle)
#+end_src



** TERM
#+begin_src emacs-lisp
(pd/package-install 'multi-term)

#+end_src


** Orgmode
*** Pretty bullets
#+begin_src emacs-lisp
(pd/package-install 'org-bullets)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
*** Crypto
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
#+end_src

#+RESULTS:

*** Org files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/Dropbox/orgzly"))
  (setq org-directory "~/Dropbox/orgzly")
#+end_src
*** Mobile Org files
#+begin_src emacs-lisp
  (setq org-mobile-directory "~/Dropbox/mobile-org")
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/inbox.org")
#+end_src

*** Evil
#+begin_src emacs-lisp
  (pd/package-install 'evil-org)
  (pd/package-install 'evil-leader)
  (require 'evil-org)
#+end_src

*** Reveal
#+begin_src emacs-lisp
(pd/package-install 'ox-reveal)
#+end_src
*** Archive
#+begin_src emacs-lisp
(defun my-org-archive-done-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+end_src
*** Pomodoro
#+begin_src emacs-lisp
(pd/package-install 'org-pomodoro)
;; Needs terminal-notifier (brew install terminal-notifier)
(defun notify-osx (title message)
(call-process "terminal-notifier"
nil 0 nil
"-group" "Emacs"
"-title" title
"-sender" "org.gnu.Emacs"
"-message" message))
;; org-pomodoro mode hooks
(add-hook 'org-pomodoro-finished-hook
(lambda ()
(notify-osx "Pomodoro completed!" "Time for a break.")))
 
(add-hook 'org-pomodoro-break-finished-hook
(lambda ()
(notify-osx "Pomodoro Short Break Finished" "Ready for Another?")))
 
(add-hook 'org-pomodoro-long-break-finished-hook
(lambda ()
(notify-osx "Pomodoro Long Break Finished" "Ready for Another?")))
 
(add-hook 'org-pomodoro-killed-hook
(lambda ()
(notify-osx "Pomodoro Killed" "One does not simply kill a pomodoro!"))) 
#+end_src

#+RESULTS:
| lambda | nil | (notify-osx Pomodoro Killed One does not simply kill a pomodoro!) |

*** Keybindings

#+begin_src emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src
** Enhancements
*** Auto revert
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
*** TODO Powerline
*** TODO snippets
*** ido 

#+begin_src emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)
#+end_src
**** TODO Flex matching
#+begin_src emacs-lisp
   (setq ido-enable-flex-matching 1)
  (require 'flx-ido)
  (pd/package-install 'flx-ido)
  (flx-ido-mode 1)
  ;; disable ido faces to see flx highlights.
  (setq ido-use-faces nil)
  (setq flx-ido-threshold 300)
#+end_src
**** For buffers
#+begin_src emacs-lisp
(iswitchb-mode)
(define-key evil-normal-state-map (kbd "gb") 'iswitchb-buffer)
#+end_src
**** Awesome M-x
#+begin_src emacs-lisp
  (pd/package-install 'smex)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "s-,") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

*** Undo tree
#+begin_src emacs-lisp
  ;; (pd/package-install 'undo-tree)
  ;; (global-undo-tree-mode)
  ;; (setq undo-tree-visualizer-timestamps t)
  ;; (setq undo-tree-visualizer-diff t)
#+end_src
*** Magit
#+begin_src emacs-lisp
  (pd/package-install 'magit)
#+end_src
*** TODO speedbar
#+begin_src emacs-lisp
  ;; (pd/package-install 'sr-speedbar)
  ;; (require 'projectile-speedbar)
  ;; (setq sr-speedbar-right-side nil)
  ;; (sr-speedbar-refresh-turn-off)

  (pd/package-install 'neotree)
  (require 'neotree)
#+end_src
*** New line
Why is this not default?
#+begin_src emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src
*** Completion
#+begin_src emacs-lisp
  (pd/package-install 'auto-complete)
  (pd/package-install 'smart-tab)
  ;; (require 'auto-complete-config)
  ;; (ac-config-default)
  ;; (setq tab-always-indent 'complete)
  ;; (setq ac-auto-show-menu t)
  (defun company-complete-common-or-previous-cycle ()
    "Insert the common part of all candidates, or select the next one."
    (interactive)
    (when (company-manual-begin)
      (let ((tick (buffer-chars-modified-tick)))
        (call-interactively 'company-complete-common)
        (when (eq tick (buffer-chars-modified-tick))
          (let ((company-selection-wrap-around t))
            (call-interactively 'company-select-previous))))))

  ;; (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "<backtab>") 'company-complete-common-or-previous-cycle)

  (setq smart-tab-completion-functions-alist
     (quote
      ((emacs-lisp-mode . lisp-complete-symbol)
       (text-mode . dabbrev-completion)
       (Python . company-complete-common-or-cycle))))
#+end_src

*** COMMENT Projectile
#+begin_src emacs-lisp
    (pd/package-install 'projectile)
    (projectile-global-mode)
    (setq projectile-generic-command "find . -type f -not -iwholename '*.git*' -not -iwholename '*site-packages*' -not -iwholename '*.pyc' -print0")
    (setq projectile-file-exists-local-cache-expire (* 5 60))
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'helm)

#+end_src
	
*** underscores!
#+begin_src emacs-lisp
(modify-syntax-entry ?_ "_")
#+end_src

** Helm
#+begin_src emacs-lisp
  (pd/package-install 'helm)
  (pd/package-install 'helm-projectile)
  (helm-projectile-on)
#+end_src
   
** Looks
*** Theme
#+begin_src emacs-lisp
  ;(pd/package-install 'monokai-theme)
  ;(pd/package-install 'solarized-theme)
  ;(load-theme 'solarized-light t)
  ;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (set-cursor-color "#0a9dff")
  (pd/package-install 'darktooth-theme)
  (load-theme 'darktooth t)

#+end_src

*** Cursor
#+begin_src emacs-lisp
(setq evil-insert-state-cursor 'hbar
      evil-normal-state-cursor 'box
      evil-visual-state-cursor 'box
      evil-default-cursor t)
#+end_src

*** Frame
#+begin_src emacs-lisp
  (set-frame-font "Menlo 13" nil t)
  (blink-cursor-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
    
*** Vertical ido
#+begin_src emacs-lisp
(pd/package-install 'ido-vertical-mode)
(ido-vertical-mode 1)
#+end_src
    
*** Tabs 
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq default-tab-width 4)
#+end_src
   
	
** Journaling	
#+begin_src emacs-lisp
  ;(pd/package-install 'org-journal)
#+end_src
** COMMENT gpg
#+begin_src emacs-lisp
  (setq epg-gpg-program "/usr/local/bin/gpg")

  (defun dwim-kill-gpg-buffers ()
    (interactive)
    (let ((buffers-killed 0))
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (when (string-match ".*\.gpg$" (buffer-name buffer))
            (let ((current-time (second (current-time)))
                  (last-displayed-time (second buffer-display-time)))
              (when (> (- current-time last-displayed-time)
                       60)
                (message "Auto killing .gpg buffer '%s'" (buffer-name buffer))
                (when (buffer-modified-p buffer)
                  (save-buffer))
                (kill-buffer buffer)
                (incf buffers-killed))))))
      (unless (zerop buffers-killed)
        (message "%s .gpg buffers have been autosaved and killed" buffers-killed))))

  (run-with-idle-timer 30 t 'dwim-kill-gpg-buffers)
#+end_src
** Clipboard
#+begin_src emacs-lisp
  (defun isolate-kill-ring()
    "Isolate Emacs kill ring from OS X system pasteboard.
  This function is only necessary in window system."
    (interactive)
    (setq interprogram-cut-function nil)
    (setq interprogram-paste-function nil))

  (defun pasteboard-copy()
    "Copy region to OS X system pasteboard."
    (interactive)
    (shell-command-on-region
     (region-beginning) (region-end) "pbcopy"))

  (defun pasteboard-paste()
    "Paste from OS X system pasteboard via `pbpaste' to point."
    (interactive)
    (shell-command-on-region
     (point) (if mark-active (mark) (point)) "pbpaste" nil t))

  (defun pasteboard-cut()
    "Cut region and put on OS X system pasteboard."
    (interactive)
    (pasteboard-copy)
    (delete-region (region-beginning) (region-end)))

  (if window-system
      (progn
        (isolate-kill-ring)
        ;; bind CMD+C to pasteboard-copy
        (global-set-key (kbd "s-c") 'pasteboard-copy)
        ;; bind CMD+V to pasteboard-paste
        (global-set-key (kbd "s-v") 'pasteboard-paste)
        ;; bind CMD+X to pasteboard-cut
        (global-set-key (kbd "s-x") 'pasteboard-cut))

    ;; you might also want to assign some keybindings for non-window
    ;; system usage (i.e., in your text terminal, where the
    ;; command->super does not work)
    ) 
#+end_src
